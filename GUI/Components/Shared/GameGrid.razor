@using Model
@rendermode InteractiveServer
@code {

    [Parameter]
    public Game? game { get; set; }

    FleetGrid? yourFleetGrid;
    ShotsGrid? yourShotsGrid;

    protected override void OnParametersSet()
    {
        if (game != null)
        {
            yourFleetGrid = new FleetGrid(game.GridRows, game.GridColumns);
            yourShotsGrid = new ShotsGrid(game.GridRows, game.GridColumns);
        }
    }


    void handleOnClick(Square square)
    {
        var result = game.HandleSquareClicked(square);
        syncGrids(game.Player1,yourShotsGrid);
        syncGrids(game.Player2,yourFleetGrid);
    }


    string colorSquare(Square square, Grid grid){
        string color; 
        color = square.SquareState switch
        {
            SquareState.Sunken => "red",
            SquareState.Hit => "orange",
            SquareState.Missed => "green",
            SquareState.Intact when grid == yourFleetGrid && game.Player2.PlayerFleet.Ships.SelectMany(s => s.Squares).Any(sq => sq.Row == square.Row && sq.Column == square.Column) => "yellow",
            _ => "lightblue"
        };
        return color;
    }

    void syncGrids(Player player, Grid grid) {
        foreach(var ship in player.PlayerFleet.Ships) {
            foreach (var shipSquare in ship.Squares)
            {
                var gridSquare = grid.Squares.FirstOrDefault(s => s.Row == shipSquare.Row && s.Column == shipSquare.Column);
                if (gridSquare != null)
                {
                    Console.WriteLine($"gridSquare: {shipSquare?.Row}, {shipSquare?.Column}, {shipSquare?.SquareState}");
                    gridSquare.ChangeState(shipSquare.SquareState);
                }
            }
        }
    }
}

@if (game.Winner == null ) {
    <div class="grids-container">
        <div>
            <h4>Your Fleet</h4>
            <div class="grid">
                @foreach (var square in yourFleetGrid.Squares)
                {
                    <div class="square" style="background-color: @(colorSquare(square,yourFleetGrid)); grid-row: @(square.Row + 1); grid-column: @(square.Column + 1);)">
                        (@square.Row, @square.Column)
                    </div>
                }
            </div>
        </div>
        <div>
            <h4>Your Shots</h4>
            <div class="grid">
                @foreach (var square in yourShotsGrid.Squares)
                {
                    <div class="square" style="background-color: @(colorSquare(square,yourShotsGrid)); grid-row: @(square.Row + 1); grid-column: @(square.Column + 1)" @onclick="() => handleOnClick(square)">
                        (@square.Row, @square.Column)
                    </div>
                }
            </div>
        </div>
    </div>
} else {
    <div>
        <h3>Game Over</h3>
        <p>@game.Winner has won the game!</p>
    </div>
}

<style>
    .grids-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 1fr;
        width: 100vw;
        height: 100vh;
        gap: 40px;
        margin: 0;
        box-sizing: border-box;
        justify-items: stretch;
        align-items: stretch;
    }
    .grid {
        display: grid;
        width: 100%;
        height: 100%;
        box-sizing: border-box;
        place-items: center;
        overflow: hidden;
    }
    .square {
        width: 100%;
        height: 100%;
        aspect-ratio: 1 / 1;
        border: 1px solid black;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 10px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        overflow: hidden;
        text-align: center;
        white-space: nowrap;
        word-break: keep-all;
    }
</style>